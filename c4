from keras.applications import VGG16
#Load the VGG model
vgg_conv = VGG16(weights='imagenet', include_top=False, input_shape=(128, 128, 3))

--------------------------------------------

# Freeze the layers except the last 4 layers
for layer in vgg_conv.layers[:-4]:
    layer.trainable = False
 
# Check the trainable status of the individual layers
for layer in vgg_conv.layers:
    print(layer, layer.trainable)
    
-----------------------------------------------

from keras import models
from keras import layers
from keras import optimizers
 
# Create the model
model = models.Sequential()
 
# Add the vgg convolutional base model
model.add(vgg_conv)
 
# Add new layers
model.add(layers.Flatten())
model.add(layers.Dense(1024, activation='relu'))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(12, activation='softmax'))
 
# Show a summary of the model. Check the number of trainable parameters
model.summary()

------------------------------------------------

from keras.preprocessing.image import ImageDataGenerator

train_dir = "/data/home/nasilemak/notebooks/notebooks/openhack/cnn_2/train"
validation_dir = "/data/home/nasilemak/notebooks/notebooks/openhack/cnn_2/val"
test_datagen = ImageDataGenerator(rescale=1./255)
train_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(train_dir, target_size=(128,128), batch_size=20, class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(validation_dir, target_size=(128,128),batch_size=20, class_mode='categorical')

------------------------------------------------

# Compile the model
model.compile(loss='categorical_crossentropy',
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])
# Train the model
history = model.fit_generator(
      train_generator,
      steps_per_epoch=train_generator.samples/train_generator.batch_size ,
      epochs=30,
      validation_data=validation_generator,
      validation_steps=validation_generator.samples/validation_generator.batch_size,
      verbose=1)
 
# Save the model
model.save('small_last4.h5')

---------------------------------------------------

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
 
epochs = range(len(acc))
 
plt.plot(epochs, acc, 'b', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
 
plt.figure()
 
plt.plot(epochs, loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
 
plt.show()

----------------------------------------------------

from keras.models import load_model
from keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
import os
from keras.applications.imagenet_utils import preprocess_input, decode_predictions

%matplotlib inline

base_image_url = "/data/home/nasilemak/notebooks/notebooks/openhack/resized_images_cnn/cnn/"
pic = "resized_ski_helmet.jpg"
pic2 = "resized_carabiner.jpg"
pic3= "resized_insulated_jacket.jpg"
pic4 = "resized_axe.jpg"
pic5 = "resized_tent.jpg"

fig = plt.figure(figsize=(12, 16))

def load_image(img_path, show=False):

    img = image.load_img(img_path, target_size=(128, 128))
    img_tensor = image.img_to_array(img)                    # (height, width, channels)
    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)
    img_tensor /= 255.                                      # imshow expects values in the range [0, 1]

    #a=fig.add_subplot(4,np.ceil(12/4),2)
    #imgplot = plt.imshow(img)
    return img_tensor

image = load_image(base_image_url + pic)
#model.predict(image)
a= 7
if a == model.predict_classes(image):
    print(model.predict_classes(image))
print(train_generator.class_indices)

preds = model.predict(image)
num = 0
for cls in train_generator.class_indices:
    if preds[0][train_generator.class_indices[cls]] > 0.9:
        img = Image.open(base_image_url + pic)
        a=fig.add_subplot(4,np.ceil(12/4),1)
        imgplot = plt.imshow(img)
        a.set_title(cls)
    #print(str(cls)+": "+str(preds[0][train_generator.class_indices[cls]]))
